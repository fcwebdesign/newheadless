{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Image from 'next/image';\nexport default function Post(data) {\n  const post = data.post;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"h1\", {\n      children: post.title\n    }), /*#__PURE__*/_jsx(Image, {\n      width: \"640\",\n      height: \"426\",\n      src: post.featuredImage.node.sourceUrl\n    }), /*#__PURE__*/_jsx(\"article\", {\n      dangerouslySetInnerHTML: {\n        __html: post.content\n      }\n    })]\n  });\n}\nexport async function getStaticProps(context) {\n  const res = await fetch('http://test.local/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: `\n                query SinglePost($id: ID!, $idType: PostIdType!) {\n                    post(id: $id, idType: $idType) {\n                        title\n                        slug\n                        content\n                        featuredImage {\n                            node {\n                                sourceUrl\n                            }\n                        }\n                    }\n                }\n            `,\n      variables: {\n        id: context.params.slug,\n        idType: 'SLUG'\n      }\n    })\n  });\n  const json = await res.json();\n  return {\n    props: {\n      post: json.data.post\n    }\n  };\n}\nexport async function getStaticPaths() {\n  const res = await fetch('http://test.local/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: `\n            query AllPostsQuery {\n                posts {\n                    nodes {\n                        slug\n                        content\n                        title\n                        featuredImage {\n                            node {\n                                sourceUrl\n                            }\n                        }\n                    }\n                }\n            }\n        `\n    })\n  });\n  const json = await res.json();\n  const posts = json.data.posts.nodes;\n  const paths = posts.map(post => ({\n    params: {\n      slug: post.slug\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}","map":null,"metadata":{},"sourceType":"module"}